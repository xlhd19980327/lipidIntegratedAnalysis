addSigLabel <- function(x){
x[is.na(x)] <- 1
label <- c('', "*", "**", "***")
allLable <- ifelse(x >= 0.05, label[1], NA)
allLable <- ifelse(x < 0.05 & x >= 0.01, label[2], allLable)
allLable <- ifelse(x < 0.01 & x >= 0.001, label[3], allLable)
allLable <- ifelse(x < 0.001, label[4], allLable)
}
sigLabel2 <- addSigLabel(lipid_subclass_integStat$p)
lipid_subclass_integStat <- cbind(lipid_subclass_integStat, sigLabel = sigLabel2)
## Visualize with the tile plot
realmean <- lipid_subclass_stat2$realmean
names(realmean) <- lipid_subclass_stat2$group
getlog2FC <- function(x){
cpr <- x[names(x) == controlGrp]
if(length(cpr) != 0){
res <- log2(x/cpr)
}else{
res <- rep(NA, length(x))
}
}
log2FC <- unlist(tapply(realmean, lipid_subclass_stat2$subclass, getlog2FC))
lipid_subclass_stat_tile <- lipid_subclass_stat2 %>%
left_join(lipid_subclass_stat3) %>%
add_column(log2FC = log2FC) %>%
#ignore other info(eg. e/p, d)
mutate(chain = as.numeric(gsub(".*?([0-9]+):.*", "\\1", subclass)),
unsaturate = as.numeric(gsub(".*?:([0-9]+).*", "\\1", subclass)),
Class = gsub("(.*?)\\(.*", "\\1", subclass))
View(lipid_subclass_stat2)
View(lipid_subclass_stat)
View(lipid_subclass_integStat)
lipid_subclass_stat_tile <- lipid_subclass_stat2 %>%
left_join(lipid_subclass_stat3) #%>%
View(lipid_subclass_stat_tile)
View(lipid_subclass_integStat)
View(log2FC)
a <- lipid_subclass_stat3 %>%
group_by(subclass) %>%
filter(n() != 4)
View(a)
b <- lipid_subclass_stat2 %>%
group_by(subclass) %>%
filter(n() != 4)
View(b)
View(lipid_subclass_stat_p)
View(lipid_subclass_stat_p[["PC(24:1)"]])
x <- lipid_subclass_stat_p[["PC(24:1)"]]
subclass <- unique(x$subclass)
#Totally equal to t.test() one by one
p <- pairwise.t.test(x$lipidsum, x$group, p.adjust.method = "none", pool.sd = F)$p.value
p
p1 <- p[rownames(p) == controlGrp, ]
p2 <- p[, colnames(p) == controlGrp]
p1
p2
p1 <- p[rownames(p) == controlGrp, , drop = F]
p1
names(p1)
p1 <- p[rownames(p) == controlGrp, ]
names(p1)
p_tidy <- c(p1[!is.na(p1)], p2[!is.na(p2)])
if(length(p_tidy) == 0){
result <- NULL
}else {
result <- data.frame(
group = c(names(p_tidy), controlGrp),
p = c(p_tidy, NA),
subclass = subclass
)
}
result
names(p_tidy)
p
p1 <- p[rownames(p) == controlGrp, ]
names(p1) <- colnames(p)
p2 <- p[, colnames(p) == controlGrp]
names(p2) <- rownames(p)
if(length(p_tidy) == 0){
result <- NULL
}else {
result <- data.frame(
group = c(names(p_tidy), controlGrp),
p = c(p_tidy, NA),
subclass = subclass
)
}
result
p_tidy
p1
p2
names(p_tidy) <- c(colnames(p), rownames(p))
p1
p2 == NULL
p2 <- p[, colnames(p) == controlGrp]
p2
c(p1, p2)
names(c(p1, p2))
p_tidy <- c(p1, p2)
View(p_tidy)
View(p_tidy)
p_tidy
p_tidy <- p_tidy[!is.na(p_tidy)]
View(p_tidy)
p_tidy
if(length(p_tidy) == 0){
result <- NULL
}else {
result <- data.frame(
group = c(names(p_tidy), controlGrp),
p = c(p_tidy, NA),
subclass = subclass
)
}
result
#Totally equal to t.test() one by one
p <- pairwise.t.test(x$lipidsum, x$group, p.adjust.method = "none", pool.sd = F)$p.value
p1 <- p[rownames(p) == controlGrp, ]
if(length(p1) != 0){
names(p1) <- colnames(p)
}
p2 <- p[, colnames(p) == controlGrp]
if(length(p2) != 0){
names(p2) <- rownames(p)
}
p_tidy <- c(p1, p2)
p_tidy <- p_tidy[!is.na(p_tidy)]
if(length(p_tidy) == 0){
result <- NULL
}else {
result <- data.frame(
group = c(names(p_tidy), controlGrp),
p = c(p_tidy, NA),
subclass = subclass
)
}
result
View(a)
getPValue <- function(x){
subclass <- unique(x$subclass)
#Totally equal to t.test() one by one
p <- pairwise.t.test(x$lipidsum, x$group, p.adjust.method = "none", pool.sd = F)$p.value
p1 <- p[rownames(p) == controlGrp, ]
if(length(p1) != 0){
names(p1) <- colnames(p)
}
p2 <- p[, colnames(p) == controlGrp]
if(length(p2) != 0){
names(p2) <- rownames(p)
}
p_tidy <- c(p1, p2)
p_tidy <- p_tidy[!is.na(p_tidy)]
if(length(p_tidy) == 0){
result <- NULL
}else {
result <- data.frame(
group = c(names(p_tidy), controlGrp),
p = c(p_tidy, NA),
subclass = subclass
)
}
return(result)
}
lipid_subclass_stat3 <- lapply(lipid_subclass_stat_p, getPValue)
lipid_subclass_stat3 <- do.call(rbind, lipid_subclass_stat3)
lipid_subclass_integStat <- left_join(lipid_subclass_stat, lipid_subclass_stat2)
lipid_subclass_integStat <- left_join(lipid_subclass_integStat, lipid_subclass_stat3)
addSigLabel <- function(x){
x[is.na(x)] <- 1
label <- c('', "*", "**", "***")
allLable <- ifelse(x >= 0.05, label[1], NA)
allLable <- ifelse(x < 0.05 & x >= 0.01, label[2], allLable)
allLable <- ifelse(x < 0.01 & x >= 0.001, label[3], allLable)
allLable <- ifelse(x < 0.001, label[4], allLable)
}
sigLabel2 <- addSigLabel(lipid_subclass_integStat$p)
lipid_subclass_integStat <- cbind(lipid_subclass_integStat, sigLabel = sigLabel2)
for(i in lipClasses){
oneLipClassData <- subset(lipid_subclass_integStat,
subset = Class == i)
if(nrow(oneLipClassData) != 0){
ggplot(data = oneLipClassData, aes(x = group)) +
geom_bar(aes(y = mean, fill = group), stat = "identity") +
geom_errorbar(aes(ymin = realmean - sd, ymax = realmean + sd, color = group), width = 0.2) +
geom_dotplot(aes(y = lipidsum), binaxis='y', stackdir='center') +
geom_text(aes(y = realmean+1.5*sd, label = sigLabel),
size = 3, fontface = "bold", color = "red") +
theme_classic() +
facet_wrap(~subclass, scales="free")
ggsave(paste0("../output/FAchainVisual/integPlot/", i, ".pdf"), dpi = 300, width = 15, height = 10)
}
}
## Visualize with the tile plot
realmean <- lipid_subclass_stat2$realmean
names(realmean) <- lipid_subclass_stat2$group
getlog2FC <- function(x){
cpr <- x[names(x) == controlGrp]
if(length(cpr) != 0){
res <- log2(x/cpr)
}else{
res <- rep(NA, length(x))
}
}
log2FC <- unlist(tapply(realmean, lipid_subclass_stat2$subclass, getlog2FC))
lipid_subclass_stat_tile <- lipid_subclass_stat2 %>%
left_join(lipid_subclass_stat3) #%>%
add_column(log2FC = log2FC) %>%
#ignore other info(eg. e/p, d)
mutate(chain = as.numeric(gsub(".*?([0-9]+):.*", "\\1", subclass)),
unsaturate = as.numeric(gsub(".*?:([0-9]+).*", "\\1", subclass)),
Class = gsub("(.*?)\\(.*", "\\1", subclass))
lipid_subclass_stat_tile <- lipid_subclass_stat2 %>%
left_join(lipid_subclass_stat3) %>%
add_column(log2FC = log2FC) %>%
#ignore other info(eg. e/p, d)
mutate(chain = as.numeric(gsub(".*?([0-9]+):.*", "\\1", subclass)),
unsaturate = as.numeric(gsub(".*?:([0-9]+).*", "\\1", subclass)),
Class = gsub("(.*?)\\(.*", "\\1", subclass))
sigLabel3 <- addSigLabel(lipid_subclass_stat_tile$p)
lipid_subclass_stat_tile <- cbind(lipid_subclass_stat_tile, sigLabel = sigLabel3)
for(i in groupsLevel[groupsLevel != controlGrp]){
oneGrpdata <- subset(lipid_subclass_stat_tile,
subset = group == i & !is.na(log2FC))
ggplot(oneGrpdata, aes(x = chain, y = unsaturate)) +
geom_tile(aes(fill = log2FC)) +
geom_text(aes(label = sigLabel),
size = 3, fontface = "bold", color = "red") +
theme(
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(colour = "gray", linetype = "dashed")
) +
facet_wrap(~Class) +
scale_x_continuous(breaks = seq(0, max(oneGrpdata$chain), 2))+
xlab("Chain length") +
ylab("Chain unsaturation") +
scale_fill_gradient2(low = "blue",
mid = "white",
high = "red",
midpoint = 0) #+
#geom_text(aes(label = ifelse(nmolecules > 1, nmolecules,
#                             "")))
ggsave(paste0("../output/FAchainVisual/tilePlot/", i, ".pdf"), dpi = 300, width = 25, height = 10)
}
View(lipid_subclass_stat_tile)
for(i in groupsLevel[groupsLevel != controlGrp]){
oneGrpdata <- subset(lipid_subclass_stat_tile,
subset = group == i & !is.na(log2FC))
ggplot(oneGrpdata, aes(x = chain, y = unsaturate)) +
geom_tile(aes(fill = log2FC)) +
geom_text(aes(label = sigLabel),
size = 3, fontface = "bold", color = "red") +
theme(
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(colour = "gray", linetype = "dashed")
) +
facet_wrap(~Class) +
scale_x_continuous(breaks = seq(0, max(oneGrpdata$chain), 2))+
xlab("Chain length") +
ylab("Chain unsaturation") +
scale_fill_gradient2(low = "blue",
mid = "white",
high = "red",
midpoint = 0) #+
#geom_text(aes(label = ifelse(nmolecules > 1, nmolecules,
#                             "")))
ggsave(paste0("../output/FAchainVisual/tilePlot/", i, ".pdf"), dpi = 300, width = 25, height = 10)
}
### Tidy for and do Visualization ###
# Tidy and integrate itensity of lipid class containing FA chain info
## NOTE4-ref: client assigned argument - plotInfo
## NOTE4-ref: Choose a statistics type for later visualization
## NOTE4-ref: FA_info: Statistics fatty acid chain&unsaturated info
## NOTE4-ref: all_info: Statistics all chain&unsaturated info
plotInfo <- "FA_info"
lipid_subclass_handle <- data.frame()
if(plotInfo == "all_info"){
# Use MS1 & MS2 to do the later statistics, code above should be commented manually
for(i in 1:nrow(data_sub_allhandle)){
# e,p connection info will be ignored
fa <- fasInfo[[i]][[1]]
chains <- sum(as.numeric(gsub(".*?([0-9]+):.*", "\\1", fa)))
unsaturate <- sum(as.numeric(gsub(".*?:([0-9]+).*", "\\1", fa)))
Class <- names(fasInfo[[i]][1])
subclass <- paste0(Class, "(", chains, ":", unsaturate, ")")
lipid_subclass_handle <- rbind(lipid_subclass_handle,
cbind(subclass = subclass,
bind_rows(replicate(length(subclass), data_sub_allhandle[i, ], simplify = FALSE))))
}
}else if(plotInfo == "FA_info"){
# Use MS2 to do the later statistics only
for(i in 1:nrow(data_sub_allhandle)){
# e,p connection info will be ignored
fa <- fasInfo[[i]][[1]]
Class <- names(fasInfo[[i]][1])
subclass <- paste0(Class, "(", fa, ")")
lipid_subclass_handle <- rbind(lipid_subclass_handle,
cbind(subclass = subclass,
bind_rows(replicate(length(subclass), data_sub_allhandle[i, ], simplify = FALSE))))
}
lipid_subclass_handle <- subset(lipid_subclass_handle, subset = ms1 == F)
}
## Use lipid_subclass_handle to calculate itensity of lipid class containing FA chain info(subclass)
## Visualize with the facet plot
lipid_subclass_stat <- lipid_subclass_handle %>%
ungroup() %>%
select(-ms1, -lipidName) %>%
gather(key = "case", value = "lipidsum", -subclass, -Class) %>%
group_by(subclass, case, Class) %>%
filter(!is.na(lipidsum)) %>%    #delete low abundance of the lipid signal
summarise(lipidsum = sum(lipidsum) / n()) %>% #calc abundance of the lipid in a sample
mutate(group = gsub("(.*?)_[0-9]+$", "\\1", case)) %>%
ungroup() %>%
group_by(group, subclass) %>%
filter(n() >= 3) #if the lipid signal of one group are detected in no more than 2 samples, the lipid will be dropped
lipid_subclass_stat2 <- lipid_subclass_stat %>%
group_by(subclass, group) %>%
summarise(mean = mean(lipidsum) / n(),
realmean = mean(lipidsum) ,
sd = sd(lipidsum))
lipid_subclass_stat_p <- split(lipid_subclass_stat, lipid_subclass_stat$subclass)
getPValue <- function(x){
subclass <- unique(x$subclass)
#Totally equal to t.test() one by one
p <- pairwise.t.test(x$lipidsum, x$group, p.adjust.method = "none", pool.sd = F)$p.value
p1 <- p[rownames(p) == controlGrp, ]
if(length(p1) != 0){
names(p1) <- colnames(p)
}
p2 <- p[, colnames(p) == controlGrp]
if(length(p2) != 0){
names(p2) <- rownames(p)
}
p_tidy <- c(p1, p2)
p_tidy <- p_tidy[!is.na(p_tidy)]
if(length(p_tidy) == 0){
result <- NULL
}else {
result <- data.frame(
group = c(names(p_tidy), controlGrp),
p = c(p_tidy, NA),
subclass = subclass
)
}
return(result)
}
lipid_subclass_stat3 <- lapply(lipid_subclass_stat_p, getPValue)
lipid_subclass_stat3 <- do.call(rbind, lipid_subclass_stat3)
lipid_subclass_integStat <- left_join(lipid_subclass_stat, lipid_subclass_stat2)
lipid_subclass_integStat <- left_join(lipid_subclass_integStat, lipid_subclass_stat3)
addSigLabel <- function(x){
x[is.na(x)] <- 1
label <- c('', "*", "**", "***")
allLable <- ifelse(x >= 0.05, label[1], NA)
allLable <- ifelse(x < 0.05 & x >= 0.01, label[2], allLable)
allLable <- ifelse(x < 0.01 & x >= 0.001, label[3], allLable)
allLable <- ifelse(x < 0.001, label[4], allLable)
}
sigLabel2 <- addSigLabel(lipid_subclass_integStat$p)
lipid_subclass_integStat <- cbind(lipid_subclass_integStat, sigLabel = sigLabel2)
## Visualize with the tile plot
realmean <- lipid_subclass_stat2$realmean
names(realmean) <- lipid_subclass_stat2$group
getlog2FC <- function(x){
cpr <- x[names(x) == controlGrp]
if(length(cpr) != 0){
res <- log2(x/cpr)
}else{
res <- rep(NA, length(x))
}
}
log2FC <- unlist(tapply(realmean, lipid_subclass_stat2$subclass, getlog2FC))
lipid_subclass_stat_tile <- lipid_subclass_stat2 %>%
left_join(lipid_subclass_stat3) %>%
add_column(log2FC = log2FC) %>%
#ignore other info(eg. e/p, d)
mutate(chain = as.numeric(gsub(".*?([0-9]+):.*", "\\1", subclass)),
unsaturate = as.numeric(gsub(".*?:([0-9]+).*", "\\1", subclass)),
Class = gsub("(.*?)\\(.*", "\\1", subclass))
sigLabel3 <- addSigLabel(lipid_subclass_stat_tile$p)
lipid_subclass_stat_tile <- cbind(lipid_subclass_stat_tile, sigLabel = sigLabel3)
for(i in groupsLevel[groupsLevel != controlGrp]){
oneGrpdata <- subset(lipid_subclass_stat_tile,
subset = group == i & !is.na(log2FC))
ggplot(oneGrpdata, aes(x = chain, y = unsaturate)) +
geom_tile(aes(fill = log2FC)) +
geom_text(aes(label = sigLabel),
size = 3, fontface = "bold", color = "red") +
theme(
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(colour = "gray", linetype = "dashed")
) +
facet_wrap(~Class) +
scale_x_continuous(breaks = seq(0, max(oneGrpdata$chain), 2))+
xlab("Chain length") +
ylab("Chain unsaturation") +
scale_fill_gradient2(low = "blue",
mid = "white",
high = "red",
midpoint = 0) #+
#geom_text(aes(label = ifelse(nmolecules > 1, nmolecules,
#                             "")))
ggsave(paste0("../output/FAchainVisual/tilePlot/", i, ".pdf"), dpi = 300, width = 25, height = 10)
}
View(lipid_subclass_stat_tile)
#NOTE2-ref: should indicate the control group or set on the first column
controlGrp <- groupsLevel[1]
getPValue <- function(x){
subclass <- unique(x$subclass)
#Totally equal to t.test() one by one
p <- pairwise.t.test(x$lipidsum, x$group, p.adjust.method = "none", pool.sd = F)$p.value
p1 <- p[rownames(p) == controlGrp, ]
if(length(p1) != 0){
names(p1) <- colnames(p)
}
p2 <- p[, colnames(p) == controlGrp]
if(length(p2) != 0){
names(p2) <- rownames(p)
}
p_tidy <- c(p1, p2)
p_tidy <- p_tidy[!is.na(p_tidy)]
if(length(p_tidy) == 0){
result <- NULL
}else {
result <- data.frame(
group = c(names(p_tidy), controlGrp),
p = c(p_tidy, NA),
subclass = subclass
)
}
return(result)
}
lipid_subclass_stat3 <- lapply(lipid_subclass_stat_p, getPValue)
lipid_subclass_stat3 <- do.call(rbind, lipid_subclass_stat3)
lipid_subclass_integStat <- left_join(lipid_subclass_stat, lipid_subclass_stat2)
lipid_subclass_integStat <- left_join(lipid_subclass_integStat, lipid_subclass_stat3)
addSigLabel <- function(x){
x[is.na(x)] <- 1
label <- c('', "*", "**", "***")
allLable <- ifelse(x >= 0.05, label[1], NA)
allLable <- ifelse(x < 0.05 & x >= 0.01, label[2], allLable)
allLable <- ifelse(x < 0.01 & x >= 0.001, label[3], allLable)
allLable <- ifelse(x < 0.001, label[4], allLable)
}
sigLabel2 <- addSigLabel(lipid_subclass_integStat$p)
lipid_subclass_integStat <- cbind(lipid_subclass_integStat, sigLabel = sigLabel2)
## Visualize with the tile plot
realmean <- lipid_subclass_stat2$realmean
names(realmean) <- lipid_subclass_stat2$group
getlog2FC <- function(x){
cpr <- x[names(x) == controlGrp]
if(length(cpr) != 0){
res <- log2(x/cpr)
}else{
res <- rep(NA, length(x))
}
}
log2FC <- unlist(tapply(realmean, lipid_subclass_stat2$subclass, getlog2FC))
lipid_subclass_stat_tile <- lipid_subclass_stat2 %>%
left_join(lipid_subclass_stat3) %>%
add_column(log2FC = log2FC) %>%
#ignore other info(eg. e/p, d)
mutate(chain = as.numeric(gsub(".*?([0-9]+):.*", "\\1", subclass)),
unsaturate = as.numeric(gsub(".*?:([0-9]+).*", "\\1", subclass)),
Class = gsub("(.*?)\\(.*", "\\1", subclass))
sigLabel3 <- addSigLabel(lipid_subclass_stat_tile$p)
lipid_subclass_stat_tile <- cbind(lipid_subclass_stat_tile, sigLabel = sigLabel3)
for(i in groupsLevel[groupsLevel != controlGrp]){
oneGrpdata <- subset(lipid_subclass_stat_tile,
subset = group == i & !is.na(log2FC))
ggplot(oneGrpdata, aes(x = chain, y = unsaturate)) +
geom_tile(aes(fill = log2FC)) +
geom_text(aes(label = sigLabel),
size = 3, fontface = "bold", color = "red") +
theme(
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(colour = "gray", linetype = "dashed")
) +
facet_wrap(~Class) +
scale_x_continuous(breaks = seq(0, max(oneGrpdata$chain), 2))+
xlab("Chain length") +
ylab("Chain unsaturation") +
scale_fill_gradient2(low = "blue",
mid = "white",
high = "red",
midpoint = 0) #+
#geom_text(aes(label = ifelse(nmolecules > 1, nmolecules,
#                             "")))
ggsave(paste0("../output/FAchainVisual/tilePlot/", i, ".pdf"), dpi = 300, width = 25, height = 10)
}
for(i in groupsLevel[groupsLevel != controlGrp]){
oneGrpdata <- subset(lipid_subclass_stat_tile,
subset = group == i & !is.na(log2FC))
ggplot(oneGrpdata, aes(x = chain, y = unsaturate)) +
geom_tile(aes(fill = log2FC)) +
geom_text(aes(label = sigLabel),
size = 3, fontface = "bold", color = "red") +
theme(
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(colour = "gray", linetype = "dashed")
) +
facet_wrap(~Class) +
scale_x_continuous(breaks = seq(0, max(oneGrpdata$chain), 2))+
xlab("Chain length") +
ylab("Chain unsaturation") +
scale_fill_gradient2(low = "blue",
mid = "white",
high = "red",
midpoint = 0) #+
#geom_text(aes(label = ifelse(nmolecules > 1, nmolecules,
#                             "")))
ggsave(paste0("../output/FAchainVisual/tilePlot/", i, ".pdf"), dpi = 300, width = 25, height = 10)
}
